
import { useEffect, useCallback, useMemo } from 'react';
import { useLeftPanel } from '@/hooks/use-left-panel';
import { useScheduleGenerationRunner } from '@/hooks/schedule/useScheduleGenerationRunner';
// import { useCreateItineraryHandler } from '@/hooks/left-panel/useCreateItineraryHandler'; // Not used directly now
import { useLeftPanelCallbacks } from '@/hooks/left-panel/use-left-panel-callbacks';
import { useLeftPanelProps } from '@/hooks/left-panel/use-left-panel-props';
import { toast } from 'sonner';
import { summarizeItineraryData } from '@/utils/debugUtils';
// import type { ItineraryDay, CategoryName } from '@/types'; // ItineraryDay used, CategoryName indirectly
import type { 
  LeftPanelPropsData,
  // These specific prop types are for components, generated by useLeftPanelProps
  // ItineraryDisplayWrapperPassedProps, 
  // MainPanelWrapperPassedProps,
  // DevDebugInfoProps,
  // CategoryResultHandlerProps // This is for the component, not a direct output here
} from '@/types/left-panel/index'; // Corrected import path

export const useLeftPanelOrchestrator = () => {
  const {
    regionSelection,
    categorySelection,
    keywordsAndInputs,
    placesManagement,
    tripDetails,
    uiVisibility,
    itineraryManagement,
    handleCreateItinerary: initiateItineraryCreation, // from useLeftPanel -> useItineraryCreation
    handleCloseItinerary: closeItineraryPanel,       // from useLeftPanel -> useItineraryCreation
    categoryResultHandlers, // from useLeftPanel -> useCategoryResultHandlers
    currentPanel,
    isGeneratingItinerary: isGeneratingFromCoreHook, // from useLeftPanel -> leftPanelState
  } = useLeftPanel();

  // useScheduleGenerationRunner is used internally by useItineraryActions -> generateItinerary -> adapter
  // So isRunnerGenerating might not be directly needed here unless for a separate loading state.
  // const { runScheduleGeneration, isGenerating: isRunnerGenerating } = useScheduleGenerationRunner();


  // useCreateItineraryHandler is now largely replaced by logic within useLeftPanel & useItineraryCreation
  // const {
  //   createItinerary, // This was handleInitiateItineraryCreation in useItineraryCreation
  //   isCreatingItinerary: isCreatingFromCustomHook, // This was isLoading in useItineraryCreation
  // } = useCreateItineraryHandler({ // This hook might be redundant if useLeftPanel handles it well
  //   placesManagement,
  //   tripDetails,
  //   runScheduleGeneration, // This would be passed to the adapter in useLeftPanel
  // });

  // isActuallyGenerating now relies on the state from useLeftPanel, which considers internal states
  const isActuallyGenerating = isGeneratingFromCoreHook;

  const callbacks = useLeftPanelCallbacks({
    // handleConfirmCategory: keywordsAndInputs.handleConfirmCategory, // This seems to be from useLeftPanel directly
    handleConfirmCategory: categorySelection.handleConfirmCategory, // More direct from useCategorySelection via useLeftPanel
    handlePanelBack: categorySelection.handlePanelBack,
    handleCloseItinerary: closeItineraryPanel,
    setRegionSlidePanelOpen: regionSelection.setRegionSlidePanelOpen,
    selectedRegions: regionSelection.selectedRegions,
    setRegionConfirmed: regionSelection.setRegionConfirmed,
    handleCreateItinerary: initiateItineraryCreation, // This is the main trigger
  });

  const leftPanelPropsData: LeftPanelPropsData = {
    uiVisibility,
    currentPanel,
    isGeneratingItinerary: isActuallyGenerating,
    itineraryReceived: !!itineraryManagement.itinerary && itineraryManagement.itinerary.length > 0,
    itineraryManagement,
    tripDetails,
    placesManagement,
    categorySelection,
    keywordsAndInputs, // Contains directInputValues
    categoryResultHandlers,
    handleCloseItinerary: closeItineraryPanel,
    regionSelection,
    onConfirmCategoryCallbacks: callbacks.onConfirmCategoryCallbacks, // derived from handleConfirmCategory
    handlePanelBackCallbacks: callbacks.handlePanelBackCallbacks, // derived from handlePanelBack
  };

  const {
    itineraryDisplayProps, // This will be ItineraryDisplayWrapperPassedProps | null
    mainPanelProps,       // This will be MainPanelWrapperPassedProps | null
    devDebugInfoProps,    // This will be DevDebugInfoProps | null
  } = useLeftPanelProps(leftPanelPropsData);

  useEffect(() => {
    console.log("LeftPanelOrchestrator - 일정 관련 상태 변화 감지:", {
      showItineraryFromHook: uiVisibility.showItinerary,
      selectedItineraryDayFromHook: itineraryManagement.selectedItineraryDay,
      itineraryFromHookSummary: summarizeItineraryData(itineraryManagement.itinerary),
      isGeneratingState: isActuallyGenerating,
      isItineraryCreatedFromHook: itineraryManagement.isItineraryCreated,
    });
  }, [
    uiVisibility.showItinerary,
    itineraryManagement.selectedItineraryDay,
    itineraryManagement.itinerary,
    isActuallyGenerating,
    itineraryManagement.isItineraryCreated,
  ]);

  const shouldShowItineraryView = useMemo(() => 
    uiVisibility.showItinerary &&
    itineraryManagement.isItineraryCreated && // Check if it's marked as created
    itineraryManagement.itinerary &&
    itineraryManagement.itinerary.length > 0,
  [uiVisibility.showItinerary, itineraryManagement.isItineraryCreated, itineraryManagement.itinerary]);

  useEffect(() => {
    console.log("LeftPanelOrchestrator - ItineraryView 표시 결정 로직:", {
      showItineraryFromUiVisibility: uiVisibility.showItinerary,
      isItineraryCreatedFromItineraryMgmt: itineraryManagement.isItineraryCreated,
      isGeneratingState: isActuallyGenerating,
      itineraryExists: !!itineraryManagement.itinerary,
      itineraryLength: itineraryManagement.itinerary?.length || 0,
      최종결과_shouldShowItineraryView: shouldShowItineraryView,
    });

    if (itineraryManagement.itinerary && itineraryManagement.itinerary.length > 0 && itineraryManagement.itinerary.every(day => day.places.length === 0)) {
      console.warn("LeftPanelOrchestrator - 일정은 있지만 모든 일자에 장소가 없습니다:", summarizeItineraryData(itineraryManagement.itinerary));
    }
  }, [
    uiVisibility.showItinerary,
    itineraryManagement.isItineraryCreated,
    itineraryManagement.itinerary,
    isActuallyGenerating,
    shouldShowItineraryView,
  ]);

  const handleTriggerCreateItinerary = useCallback(async () => {
    if (isActuallyGenerating) {
      toast.info("일정 생성 중입니다. 잠시만 기다려주세요.");
      return;
    }
    // initiateItineraryCreation is already an async function from useLeftPanel -> useItineraryCreation
    const success = await initiateItineraryCreation(); 
    if (success) { // initiateItineraryCreation should return a boolean or the itinerary itself
      console.log("[LeftPanelOrchestrator] Itinerary creation process initiated successfully.");
      // Potentially, useLeftPanel or useItineraryCreation would set showItinerary to true.
    } else {
      console.log("[LeftPanelOrchestrator] Itinerary creation process failed to initiate or was aborted.");
    }
  }, [isActuallyGenerating, initiateItineraryCreation]);

  const enhancedItineraryDisplayProps = itineraryDisplayProps
    ? {
        ...itineraryDisplayProps,
        handleClosePanelWithBackButton: callbacks.handleClosePanelWithBackButton, // from useLeftPanelCallbacks
      }
    : null;

  const enhancedMainPanelProps = mainPanelProps
    ? {
        ...mainPanelProps, // spread mainPanelProps first
        leftPanelContainerProps: {
          ...mainPanelProps.leftPanelContainerProps,
          onCreateItinerary: handleTriggerCreateItinerary, // Override onCreateItinerary
        },
        // leftPanelContentProps is already part of mainPanelProps
      }
    : null;

  return {
    regionSelection,
    // uiVisibility, // Not directly returned, used to derive props
    // categorySelection, // Not directly returned
    placesManagement, // For CategoryResultHandler
    callbacks, // General callbacks
    categoryResultHandlers, // For CategoryResultHandler

    // Overall control and display props
    isActuallyGenerating,
    shouldShowItineraryView,
    enhancedItineraryDisplayProps, // Contains all props for ItineraryDisplayWrapper
    enhancedMainPanelProps,       // Contains all props for MainPanelWrapper
    devDebugInfoProps,            // Contains all props for DevDebugInfo
  };
};
